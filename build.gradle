plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'java'
    id 'com.gorylenko.gradle-git-properties' version '2.3.2'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'io.miret.etienne.sass' version '1.4.2'
}

// Get .env properties
def props = new Properties()
if (file(".env").exists()) {
    file(".env").withInputStream { props.load(it) }
}
def profile = props.getProperty('SPRING_PROFILES_ACTIVE')

sass {
    // Version of dart-sass: https://github.com/sass/dart-sass/releases
    version = '1.57.1'
}

// Docs: https://github.com/EtienneMiret/sass-gradle-plugin#usage
compileSass {
    dependsOn 'unzipWebjars'
    // Source directory containing sass to compile:
    sourceDir = project.file("${projectDir}/src/main/resources/static/assets/scss")

    // Directory where to output generated CSS:
    outputDir = project.file("${projectDir}/generated/main/resources/static/assets/css")

    // Load path
    loadPath project.file ("${projectDir}/generated/META-INF/resources/webjars/uswds/3.0.2")

    // Set the output style:
    // Possible values are “expanded” and “compressed”, default is “expanded”.
    style = expanded

    // Watch sass files in sourceDir for changes
    // (Default is to not to watch, compile once and terminate)
//    if (profile == 'dev') {
//        watch()
//    }
}

// compileSass needs to run before processResources
processResources {
    dependsOn compileSass
}

// Need to extend clean to also delete the generated directory (created in compileSass)
clean {
    delete "generated"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // This will only unpack webjars
    webjarConfig { transitive = false }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    webjarConfig 'org.webjars:uswds:3.0.2'

    implementation 'org.flywaydb:flyway-core'

    if (profile == 'dev') {
        implementation fileTree(dir: "$rootDir/../form-flow/build/libs", include: '*.jar')
        println "Using local library 🗼"
    } else {
        implementation 'org.codeforamerica.platform:form-flow:0.0.1-SNAPSHOT'
        println "Using 0.0.1-SNAPSHOT 💜"
    }

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.seleniumhq.selenium:selenium-java'
    testImplementation 'io.percy:percy-java-selenium:1.1.0'
    testImplementation 'org.awaitility:awaitility'
    testImplementation 'io.github.bonigarcia:webdrivermanager:5.3.0'
    testImplementation 'com.h2database:h2'

    runtimeOnly 'org.postgresql:postgresql'
}

springBoot {
    buildInfo()
}

tasks.named('test') {
    useJUnitPlatform()
}

task unzipWebjars(type: Copy) {
    configurations.webjarConfig.files.each { jar ->
        from zipTree(jar)
    }
    into 'generated'
    println('unzipWebjars ran 🐸')
}
